/** @file
 *
 *  Copyright (c) 2023, Jared McNeill <jmcneill@invisible.ca>
 *  Copyright (c) 2018 Andrei Warkentin <andrey.warkentin@gmail.com>
 *  Copyright (c) 2020, ARM Limited. All rights reserved.
 *
 *  SPDX-License-Identifier: BSD-2-Clause-Patent
 *
 **/

#include <Guid/HiiPlatformSetupFormset.h>
#include "ConfigDxeFormSetGuid.h"
#include <ConfigVars.h>

//
// EFI Variable attributes
//
#define EFI_VARIABLE_NON_VOLATILE       0x00000001
#define EFI_VARIABLE_BOOTSERVICE_ACCESS 0x00000002
#define EFI_VARIABLE_RUNTIME_ACCESS     0x00000004
#define EFI_VARIABLE_READ_ONLY          0x00000008

formset
    guid      = CONFIGDXE_FORM_SET_GUID,
    title     = STRING_TOKEN(STR_FORM_SET_TITLE),
    help      = STRING_TOKEN(STR_FORM_SET_TITLE_HELP),
    classguid = EFI_HII_PLATFORM_SETUP_FORMSET_GUID,

    efivarstore SYSTEM_TABLE_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = SystemTableMode,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore CPUCLOCK_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CpuClock,
      guid  = CONFIGDXE_FORM_SET_GUID;

    efivarstore CUSTOM_CPUCLOCK_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = CustomCpuClock,
      guid  = CONFIGDXE_FORM_SET_GUID;

#ifdef QUARTZ64
    efivarstore MULTIPHY_MODE_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = MultiPhy1Mode,
      guid  = CONFIGDXE_FORM_SET_GUID;
#endif

#if FixedPcdGet8 (PcdFanGpioBank) != 0xFF
    efivarstore FAN_VARSTORE_DATA,
      attribute = EFI_VARIABLE_BOOTSERVICE_ACCESS | EFI_VARIABLE_RUNTIME_ACCESS | EFI_VARIABLE_NON_VOLATILE,
      name  = FanMode,
      guid  = CONFIGDXE_FORM_SET_GUID;
#endif

    form formid = 1,
        title  = STRING_TOKEN(STR_FORM_SET_TITLE);
        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid = SystemTableMode.Mode,
            prompt      = STRING_TOKEN(STR_SYSCONFIG_SYSTAB_PROMPT),
            help        = STRING_TOKEN(STR_SYSCONFIG_SYSTAB_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_SYSCONFIG_SYSTAB_ACPI), value = SYSTEM_TABLE_MODE_ACPI, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_SYSTAB_BOTH), value = SYSTEM_TABLE_MODE_BOTH, flags = DEFAULT;
            option text = STRING_TOKEN(STR_SYSCONFIG_SYSTAB_DT), value = SYSTEM_TABLE_MODE_DT, flags = 0;
        endoneof;

        oneof varid = CpuClock.Clock,
            prompt      = STRING_TOKEN(STR_SYSCONFIG_CPUCLOCK_PROMPT),
            help        = STRING_TOKEN(STR_SYSCONFIG_CPUCLOCK_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_SYSCONFIG_CPUCLOCK_LOW), value = CPUCLOCK_LOW, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CPUCLOCK_DEFAULT), value = CPUCLOCK_DEFAULT, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CPUCLOCK_MAX), value = CPUCLOCK_MAX, flags = DEFAULT;
            option text = STRING_TOKEN(STR_SYSCONFIG_CPUCLOCK_CUSTOM), value = CPUCLOCK_CUSTOM, flags = 0;
        endoneof;
        
        grayoutif NOT ideqval CpuClock.Clock == 3;
          oneof varid = CustomCpuClock.Clock,
            prompt      = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_PROMPT),
            help        = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_216), value = 216, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_312), value = 312, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_408), value = 408, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_816), value = 816, flags = DEFAULT;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_1008), value = 1008, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_1200), value = 1200, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_1416), value = 1416, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_1608), value = 1608, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_1800), value = 1800, flags = 0;
            option text = STRING_TOKEN(STR_SYSCONFIG_CUSTOM_CPUCLOCK_1992), value = 1992, flags = 0;
          endoneof;
        endif;

#ifdef QUARTZ64
        oneof varid = MultiPhy1Mode.Mode,
            prompt      = STRING_TOKEN(STR_SYSCONFIG_MULTIPHY1_PROMPT),
            help        = STRING_TOKEN(STR_SYSCONFIG_MULTIPHY1_HELP),
            flags       = NUMERIC_SIZE_4 | INTERACTIVE | RESET_REQUIRED,
            option text = STRING_TOKEN(STR_SYSCONFIG_MULTIPHY1_USB3), value = MULTIPHY_MODE_SEL_USB3, flags = DEFAULT;
            option text = STRING_TOKEN(STR_SYSCONFIG_MULTIPHY1_SATA), value = MULTIPHY_MODE_SEL_SATA, flags = 0;
        endoneof;
#endif

#if FixedPcdGet8 (PcdFanGpioBank) != 0xFF
        checkbox varid = FanMode.Mode,
            prompt      = STRING_TOKEN(STR_SYSCONFIG_FAN_PROMPT),
            help        = STRING_TOKEN(STR_SYSCONFIG_FAN_HELP),
            flags       = CHECKBOX_DEFAULT | CHECKBOX_DEFAULT_MFG | RESET_REQUIRED,
            default     = 1,
        endcheckbox;
#endif
    endform;
endformset;
